public class Main {
    public static void main(String[] args) {
        String input = "1 + 2";
        String result = calc(input);
        System.out.println(result);
    }

    public static String calc(String input) {
        String[] tokens = input.trim().split(" ");

        // Проверка на валидность входного выражения
        if (tokens.length != 3) {
            throw new IllegalArgumentException("Неверное выражение");
        }

        String operand1 = tokens[0];
        String operator = tokens[1];
        String operand2 = tokens[2];

        // Проверка на валидность чисел
        if (!isValidNumber(operand1) || !isValidNumber(operand2)) {
            throw new IllegalArgumentException("Недопустимое число");
        }

        // Преобразование чисел в int
        int num1 = convertToNumber(operand1);
        int num2 = convertToNumber(operand2);

        int result = 0;
        switch (operator) {
            case "+":
                result = num1 + num2;
                break;
            case "-":
                result = num1 - num2;
                break;
            case "*":
                result = num1 * num2;
                break;
            case "/":
                result = num1 / num2;
                break;
            default:
                throw new IllegalArgumentException("Недопустимый оператор");
        }

        // Проверка на использование разных систем счисления одновременно
        if ((isRomanNumeral(operand1) && !isRomanNumeral(operand2)) ||
                (!isRomanNumeral(operand1) && isRomanNumeral(operand2))) {
            throw new IllegalArgumentException("Используются разные системы счисления");
        }

        // Преобразование результата в строку
        String output = String.valueOf(result);

        // Преобразование результата в римские цифры, если используются римские числа
        if (isRomanNumeral(operand1)) {
            output = convertToRomanNumeral(result);
        }

        return output;
    }

    // Проверка на валидность числа
    private static boolean isValidNumber(String num) {
        if (isRomanNumeral(num)) {
            return isValidRomanNumeral(num);
        } else {
            return isValidArabicNumber(num);
        }
    }

    // Проверка на валидность римского числа
    private static boolean isValidRomanNumeral(String num) {
        String pattern = "^(M{0,3})(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$";
        return num.matches(pattern);
    }

    // Проверка на валидность арабского числа
    private static boolean isValidArabicNumber(String num) {
        try {
            int value = Integer.parseInt(num);
            return value >= 1 && value <= 10;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // Проверка, является ли число римским
    private static boolean isRomanNumeral(String num) {
        return num.matches("[ivxIVX]+");
    }

    // Преобразование числа в int
    private static int convertToNumber(String num) {
        if (isRomanNumeral(num)) {
            return convertToArabicNumber(num);
        } else {
            return Integer.parseInt(num);
        }
    }

    // Преобразование числа в арабское число
    private static int convertToArabicNumber(String num) {
        Map<Character, Integer> romanMap = new HashMap<>();
        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);

        int result = 0;
        int previousValue = 0;

        for (int i = num.length() - 1; i >= 0; i--) {
            int currentValue = romanMap.get(Character.toUpperCase(num.charAt(i)));

            if (currentValue >= previousValue) {
                result += currentValue;
            } else {
                result -= currentValue;
            }

            previousValue = currentValue;
        }

        return result;
    }

    // Преобразование числа в римское число
    private static String convertToRomanNumeral(int num) {
        if (num < 1) {
            throw new IllegalArgumentException("Римское число не может быть меньше 1");
        }

        StringBuilder romanNumeral = new StringBuilder();

        Map<Integer, String> romanMap = new HashMap<>();
        romanMap.put(1000, "M");
        romanMap.put(900, "CM");
        romanMap.put(500, "D");
        romanMap.put(400, "CD");
        romanMap.put(100, "C");
        romanMap.put(90, "XC");
        romanMap.put(50, "L");
        romanMap.put(40, "XL");
        romanMap.put(10, "X");
        romanMap.put(9, "IX");
        romanMap.put(5, "V");
        romanMap.put(4, "IV");
        romanMap.put(1, "I");
